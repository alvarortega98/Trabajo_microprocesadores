
Robot_de_cocina_Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000938  000009cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000938  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800102  00800102  000009ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8c  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082b  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077b  00000000  00000000  00001eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00002634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000525  00000000  00000000  000028b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d8  00000000  00000000  00002dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000031ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_3>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_5>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_7>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_11>
  30:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_12>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_14>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	89 00       	.word	0x0089	; ????
  6a:	90 00       	.word	0x0090	; ????
  6c:	97 00       	.word	0x0097	; ????
  6e:	9e 00       	.word	0x009e	; ????
  70:	a5 00       	.word	0x00a5	; ????
  72:	ac 00       	.word	0x00ac	; ????
  74:	b3 00       	.word	0x00b3	; ????
  76:	ba 00       	.word	0x00ba	; ????
  78:	c1 00       	.word	0x00c1	; ????
  7a:	c8 00       	.word	0x00c8	; ????
  7c:	cf 00       	.word	0x00cf	; ????
  7e:	d4 00       	.word	0x00d4	; ????
  80:	e7 00       	.word	0x00e7	; ????
  82:	ee 00       	.word	0x00ee	; ????
  84:	f5 00       	.word	0x00f5	; ????
  86:	fc 00       	.word	0x00fc	; ????
  88:	03 01       	movw	r0, r6
  8a:	0a 01       	movw	r0, r20
  8c:	11 01       	movw	r2, r2
  8e:	18 01       	movw	r2, r16
  90:	1f 01       	movw	r2, r30
  92:	26 01       	movw	r4, r12
  94:	2d 01       	movw	r4, r26
  96:	32 01       	movw	r6, r4

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d8 e0       	ldi	r29, 0x08	; 8
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e8 e3       	ldi	r30, 0x38	; 56
  ac:	f9 e0       	ldi	r31, 0x09	; 9
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 30       	cpi	r26, 0x02	; 2
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a2 e0       	ldi	r26, 0x02	; 2
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a6 32       	cpi	r26, 0x26	; 38
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 82 01 	call	0x304	; 0x304 <main>
  ce:	0c 94 9a 04 	jmp	0x934	; 0x934 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <actualiza_contador>:

volatile int T = 0;


void actualiza_contador() {
	if (contador < 9) {
  d6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  da:	89 30       	cpi	r24, 0x09	; 9
  dc:	30 f4       	brcc	.+12     	; 0xea <actualiza_contador+0x14>
		contador++;
  de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contador>
  e8:	02 c0       	rjmp	.+4      	; 0xee <actualiza_contador+0x18>
	} else {
		contador = 0;
  ea:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <contador>
	}
	display_0 = contador;
  ee:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
  f2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <display_0>
  f6:	08 95       	ret

000000f8 <actualiza_display>:
}
	
void actualiza_display() {
	switch (display_1) {
  f8:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <display_1>
  fc:	8e 2f       	mov	r24, r30
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	8c 30       	cpi	r24, 0x0C	; 12
 102:	91 05       	cpc	r25, r1
 104:	08 f0       	brcs	.+2      	; 0x108 <actualiza_display+0x10>
 106:	56 c0       	rjmp	.+172    	; 0x1b4 <actualiza_display+0xbc>
 108:	fc 01       	movw	r30, r24
 10a:	ec 5c       	subi	r30, 0xCC	; 204
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__tablejump2__>
		case 0: display_1_7seg = 0b00111111; break; //Número 0;
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <display_1_7seg+0x1>
 11a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <display_1_7seg>
 11e:	4a c0       	rjmp	.+148    	; 0x1b4 <actualiza_display+0xbc>
		case 1: display_1_7seg = 0b00000110; break; //Número 1;
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <display_1_7seg+0x1>
 128:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <display_1_7seg>
 12c:	43 c0       	rjmp	.+134    	; 0x1b4 <actualiza_display+0xbc>
		case 2: display_1_7seg = 0b01011011; break; //Número 2;
 12e:	8b e5       	ldi	r24, 0x5B	; 91
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <display_1_7seg+0x1>
 136:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <display_1_7seg>
 13a:	3c c0       	rjmp	.+120    	; 0x1b4 <actualiza_display+0xbc>
		case 3: display_1_7seg = 0b01001111; break; //Número 3;
 13c:	8f e4       	ldi	r24, 0x4F	; 79
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <display_1_7seg+0x1>
 144:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <display_1_7seg>
 148:	35 c0       	rjmp	.+106    	; 0x1b4 <actualiza_display+0xbc>
		case 4: display_1_7seg = 0b01100110; break; //Número 4;
 14a:	86 e6       	ldi	r24, 0x66	; 102
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <display_1_7seg+0x1>
 152:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <display_1_7seg>
 156:	2e c0       	rjmp	.+92     	; 0x1b4 <actualiza_display+0xbc>
		case 5: display_1_7seg = 0b01101101; break; //Número 5;
 158:	8d e6       	ldi	r24, 0x6D	; 109
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <display_1_7seg+0x1>
 160:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <display_1_7seg>
 164:	27 c0       	rjmp	.+78     	; 0x1b4 <actualiza_display+0xbc>
		case 6: display_1_7seg = 0b01111101; break; //Número 6;
 166:	8d e7       	ldi	r24, 0x7D	; 125
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <display_1_7seg+0x1>
 16e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <display_1_7seg>
 172:	20 c0       	rjmp	.+64     	; 0x1b4 <actualiza_display+0xbc>
		case 7: display_1_7seg = 0b00000111; break; //Número 7;
 174:	87 e0       	ldi	r24, 0x07	; 7
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <display_1_7seg+0x1>
 17c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <display_1_7seg>
 180:	19 c0       	rjmp	.+50     	; 0x1b4 <actualiza_display+0xbc>
		case 8: display_1_7seg = 0b01111111; break; //Número 8;
 182:	8f e7       	ldi	r24, 0x7F	; 127
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <display_1_7seg+0x1>
 18a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <display_1_7seg>
 18e:	12 c0       	rjmp	.+36     	; 0x1b4 <actualiza_display+0xbc>
		case 9: display_1_7seg = 0b01101111; break; //Número 9;
 190:	8f e6       	ldi	r24, 0x6F	; 111
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <display_1_7seg+0x1>
 198:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <display_1_7seg>
 19c:	0b c0       	rjmp	.+22     	; 0x1b4 <actualiza_display+0xbc>
		case 10: display_1_7seg = 0b00000000; break; //Display apagado;
 19e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <display_1_7seg+0x1>
 1a2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <display_1_7seg>
 1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <actualiza_display+0xbc>
		case 11: display_1_7seg = 0b01110011; break; //Letra P;
 1a8:	83 e7       	ldi	r24, 0x73	; 115
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <display_1_7seg+0x1>
 1b0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <display_1_7seg>
	}
	
	switch (display_0) {
 1b4:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <display_0>
 1b8:	8e 2f       	mov	r24, r30
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	8c 30       	cpi	r24, 0x0C	; 12
 1be:	91 05       	cpc	r25, r1
 1c0:	08 f0       	brcs	.+2      	; 0x1c4 <actualiza_display+0xcc>
 1c2:	56 c0       	rjmp	.+172    	; 0x270 <actualiza_display+0x178>
 1c4:	fc 01       	movw	r30, r24
 1c6:	e0 5c       	subi	r30, 0xC0	; 192
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__tablejump2__>
		case 0: display_0_7seg = 0b00111111; break; //Número 0;
 1ce:	8f e3       	ldi	r24, 0x3F	; 63
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <display_0_7seg+0x1>
 1d6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <display_0_7seg>
 1da:	08 95       	ret
		case 1: display_0_7seg = 0b00000110; break; //Número 1;
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <display_0_7seg+0x1>
 1e4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <display_0_7seg>
 1e8:	08 95       	ret
		case 2: display_0_7seg = 0b01011011; break; //Número 2;
 1ea:	8b e5       	ldi	r24, 0x5B	; 91
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <display_0_7seg+0x1>
 1f2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <display_0_7seg>
 1f6:	08 95       	ret
		case 3: display_0_7seg = 0b01001111; break; //Número 3;
 1f8:	8f e4       	ldi	r24, 0x4F	; 79
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <display_0_7seg+0x1>
 200:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <display_0_7seg>
 204:	08 95       	ret
		case 4: display_0_7seg = 0b01100110; break; //Número 4;
 206:	86 e6       	ldi	r24, 0x66	; 102
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <display_0_7seg+0x1>
 20e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <display_0_7seg>
 212:	08 95       	ret
		case 5: display_0_7seg = 0b01101101; break; //Número 5;
 214:	8d e6       	ldi	r24, 0x6D	; 109
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <display_0_7seg+0x1>
 21c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <display_0_7seg>
 220:	08 95       	ret
		case 6: display_0_7seg = 0b01111101; break; //Número 6;
 222:	8d e7       	ldi	r24, 0x7D	; 125
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <display_0_7seg+0x1>
 22a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <display_0_7seg>
 22e:	08 95       	ret
		case 7: display_0_7seg = 0b00000111; break; //Número 7;
 230:	87 e0       	ldi	r24, 0x07	; 7
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <display_0_7seg+0x1>
 238:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <display_0_7seg>
 23c:	08 95       	ret
		case 8: display_0_7seg = 0b01111111; break; //Número 8;
 23e:	8f e7       	ldi	r24, 0x7F	; 127
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <display_0_7seg+0x1>
 246:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <display_0_7seg>
 24a:	08 95       	ret
		case 9: display_0_7seg = 0b01101111; break; //Número 9;
 24c:	8f e6       	ldi	r24, 0x6F	; 111
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <display_0_7seg+0x1>
 254:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <display_0_7seg>
 258:	08 95       	ret
		case 10: display_0_7seg = 0b00000000; break; //Display apagado;
 25a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <display_0_7seg+0x1>
 25e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <display_0_7seg>
 262:	08 95       	ret
		case 11: display_0_7seg = 0b01110011; break; //Letra P;
 264:	83 e7       	ldi	r24, 0x73	; 115
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <display_0_7seg+0x1>
 26c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <display_0_7seg>
 270:	08 95       	ret

00000272 <inicializa_display>:
	}
}

void inicializa_display() {
	display_0 = 0;
 272:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <display_0>
	display_1 = 11;
 276:	8b e0       	ldi	r24, 0x0B	; 11
 278:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <display_1>
	sel = 0;
 27c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <sel>
 280:	08 95       	ret

00000282 <setup_inicio>:
}

void setup_inicio() {
	
	estado = 'i';
 282:	89 e6       	ldi	r24, 0x69	; 105
 284:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <estado>
	
	cli();
 288:	f8 94       	cli
	
	TCCR1B = 0;
 28a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	//Las siguientes líneas de código son para habilitar las interrupciones de los botones SS y UP.
	PCICR = 1<<PCIE0;
 28e:	e8 e6       	ldi	r30, 0x68	; 104
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	90 83       	st	Z, r25
	PCICR |= 1<<PCIE2;
 296:	80 81       	ld	r24, Z
 298:	84 60       	ori	r24, 0x04	; 4
 29a:	80 83       	st	Z, r24
	PCMSK0 |= 1<<PCINT0; // boton UP 
 29c:	eb e6       	ldi	r30, 0x6B	; 107
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	80 83       	st	Z, r24
	PCMSK2 |= 1<<PCINT7; // boton SS 
 2a6:	ed e6       	ldi	r30, 0x6D	; 109
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	80 68       	ori	r24, 0x80	; 128
 2ae:	80 83       	st	Z, r24
	
	//Habilitamos el timer de refresco del display (modo CTC, preescalado 64)
	TCCR2A = 1<<WGM21;
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 1<<CS20;
 2b6:	e1 eb       	ldi	r30, 0xB1	; 177
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	90 83       	st	Z, r25
	TCCR2B |= 1<<CS21;
 2bc:	90 81       	ld	r25, Z
 2be:	92 60       	ori	r25, 0x02	; 2
 2c0:	90 83       	st	Z, r25
	TIMSK2 = 1<<OCIE2A;
 2c2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	OCR2A = 62;
 2c6:	9e e3       	ldi	r25, 0x3E	; 62
 2c8:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
	//Se utiliza el timer 0 en modo ctc, con preescalado de 64 y con OCR1A = 125 (1ms)
	TCCR0A |= 1<<WGM01;
 2cc:	94 b5       	in	r25, 0x24	; 36
 2ce:	92 60       	ori	r25, 0x02	; 2
 2d0:	94 bd       	out	0x24, r25	; 36
	TCCR0B |= 1<<CS00;
 2d2:	95 b5       	in	r25, 0x25	; 37
 2d4:	91 60       	ori	r25, 0x01	; 1
 2d6:	95 bd       	out	0x25, r25	; 37
	TCCR0B |= 1<<CS01;
 2d8:	95 b5       	in	r25, 0x25	; 37
 2da:	92 60       	ori	r25, 0x02	; 2
 2dc:	95 bd       	out	0x25, r25	; 37
	TIMSK0 |= 1<<OCIE1A;
 2de:	ee e6       	ldi	r30, 0x6E	; 110
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	90 81       	ld	r25, Z
 2e4:	92 60       	ori	r25, 0x02	; 2
 2e6:	90 83       	st	Z, r25
	OCR0A = 250;  // 0.001s / (1s / 16*10^6 ciclos)*64 = 250 ciclos
 2e8:	9a ef       	ldi	r25, 0xFA	; 250
 2ea:	97 bd       	out	0x27, r25	; 39
	
	//Seteamos entradas y salidas
	DDRD = 0x7F;		//Display
 2ec:	9f e7       	ldi	r25, 0x7F	; 127
 2ee:	9a b9       	out	0x0a, r25	; 10
	DDRB = 1<<1;
 2f0:	84 b9       	out	0x04, r24	; 4
	DDRB |= 1<<2;
 2f2:	84 b1       	in	r24, 0x04	; 4
 2f4:	84 60       	ori	r24, 0x04	; 4
 2f6:	84 b9       	out	0x04, r24	; 4
	
	
	inicializa_display();
 2f8:	0e 94 39 01 	call	0x272	; 0x272 <inicializa_display>
	actualiza_display();
 2fc:	0e 94 7c 00 	call	0xf8	; 0xf8 <actualiza_display>
	
	sei();
 300:	78 94       	sei
 302:	08 95       	ret

00000304 <main>:
}


int main(void) {
   do{ 
		setup_inicio();
 304:	0e 94 41 01 	call	0x282	; 0x282 <setup_inicio>
		do {
			if (bandera_UP == 1) {
 308:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <bandera_UP>
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	31 f4       	brne	.+12     	; 0x31c <main+0x18>
				actualiza_contador();
 310:	0e 94 6b 00 	call	0xd6	; 0xd6 <actualiza_contador>
				actualiza_display();
 314:	0e 94 7c 00 	call	0xf8	; 0xf8 <actualiza_display>
				bandera_UP = 0;
 318:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <bandera_UP>
			}
		} while (bandera_SS == 0);
 31c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <bandera_SS>
 320:	88 23       	and	r24, r24
 322:	91 f3       	breq	.-28     	; 0x308 <main+0x4>
		bandera_SS = 0;
 324:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <bandera_SS>
		main_principal();
 328:	0e 94 4b 03 	call	0x696	; 0x696 <main_principal>
	}while(1);
 32c:	eb cf       	rjmp	.-42     	; 0x304 <main>

0000032e <__vector_5>:
}


ISR(PCINT2_vect) {
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	2f 93       	push	r18
 33a:	4f 93       	push	r20
 33c:	5f 93       	push	r21
 33e:	6f 93       	push	r22
 340:	7f 93       	push	r23
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	af 93       	push	r26
 348:	bf 93       	push	r27
	static uint32_t Trise = 0;
	static uint32_t Ton = 0;
	static uint8_t bandera_antirrebotes_SS = 0;
	static uint32_t T_SS = 0;
	
	if (bandera_antirrebotes_SS == 1) {
 34a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <bandera_antirrebotes_SS.1666>
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	d1 f4       	brne	.+52     	; 0x386 <__vector_5+0x58>
		if (millis - T_SS > 5) {   //Cambiar el tiempo a 5 ms para simulación
 352:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <millis>
 356:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <millis+0x1>
 35a:	09 2e       	mov	r0, r25
 35c:	00 0c       	add	r0, r0
 35e:	aa 0b       	sbc	r26, r26
 360:	bb 0b       	sbc	r27, r27
 362:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <T_SS.1667>
 366:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <T_SS.1667+0x1>
 36a:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <T_SS.1667+0x2>
 36e:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <T_SS.1667+0x3>
 372:	84 1b       	sub	r24, r20
 374:	95 0b       	sbc	r25, r21
 376:	a6 0b       	sbc	r26, r22
 378:	b7 0b       	sbc	r27, r23
 37a:	06 97       	sbiw	r24, 0x06	; 6
 37c:	a1 05       	cpc	r26, r1
 37e:	b1 05       	cpc	r27, r1
 380:	10 f0       	brcs	.+4      	; 0x386 <__vector_5+0x58>
			bandera_antirrebotes_SS = 0;
 382:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <bandera_antirrebotes_SS.1666>
		}
	}
	if (bandera_antirrebotes_SS == 0) {
 386:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <bandera_antirrebotes_SS.1666>
 38a:	81 11       	cpse	r24, r1
 38c:	6b c0       	rjmp	.+214    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
		if (getBit(BOTON_SS, SS)) {
 38e:	4f 9b       	sbis	0x09, 7	; 9
 390:	24 c0       	rjmp	.+72     	; 0x3da <__vector_5+0xac>
			Trise = millis;
 392:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <millis>
 396:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <millis+0x1>
 39a:	09 2e       	mov	r0, r25
 39c:	00 0c       	add	r0, r0
 39e:	aa 0b       	sbc	r26, r26
 3a0:	bb 0b       	sbc	r27, r27
 3a2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <Trise.1664>
 3a6:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <Trise.1664+0x1>
 3aa:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <Trise.1664+0x2>
 3ae:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <Trise.1664+0x3>
			T_SS = millis;
 3b2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <millis>
 3b6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <millis+0x1>
 3ba:	09 2e       	mov	r0, r25
 3bc:	00 0c       	add	r0, r0
 3be:	aa 0b       	sbc	r26, r26
 3c0:	bb 0b       	sbc	r27, r27
 3c2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <T_SS.1667>
 3c6:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <T_SS.1667+0x1>
 3ca:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <T_SS.1667+0x2>
 3ce:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <T_SS.1667+0x3>
			bandera_antirrebotes_SS = 1;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <bandera_antirrebotes_SS.1666>
 3d8:	45 c0       	rjmp	.+138    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
		} else {
			if (estado == 'i'){
 3da:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <estado>
 3de:	89 36       	cpi	r24, 0x69	; 105
 3e0:	19 f4       	brne	.+6      	; 0x3e8 <__vector_5+0xba>
				bandera_SS = 1;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <bandera_SS>
			}
			if (estado == 's'){
 3e8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <estado>
 3ec:	83 37       	cpi	r24, 0x73	; 115
 3ee:	19 f4       	brne	.+6      	; 0x3f6 <__vector_5+0xc8>
				bandera_SS = 1;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <bandera_SS>
			}

			Ton = millis - Trise;
 3f6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <millis>
 3fa:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <millis+0x1>
 3fe:	09 2e       	mov	r0, r25
 400:	00 0c       	add	r0, r0
 402:	aa 0b       	sbc	r26, r26
 404:	bb 0b       	sbc	r27, r27
 406:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <Trise.1664>
 40a:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <Trise.1664+0x1>
 40e:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <Trise.1664+0x2>
 412:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <Trise.1664+0x3>
 416:	84 1b       	sub	r24, r20
 418:	95 0b       	sbc	r25, r21
 41a:	a6 0b       	sbc	r26, r22
 41c:	b7 0b       	sbc	r27, r23
			T_SS= millis;
 41e:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <millis>
 422:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <millis+0x1>
 426:	05 2e       	mov	r0, r21
 428:	00 0c       	add	r0, r0
 42a:	66 0b       	sbc	r22, r22
 42c:	77 0b       	sbc	r23, r23
 42e:	40 93 0f 01 	sts	0x010F, r20	; 0x80010f <T_SS.1667>
 432:	50 93 10 01 	sts	0x0110, r21	; 0x800110 <T_SS.1667+0x1>
 436:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <T_SS.1667+0x2>
 43a:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <T_SS.1667+0x3>
			bandera_antirrebotes_SS = 1;
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <bandera_antirrebotes_SS.1666>
			if (estado == 'p'){
 444:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <estado>
 448:	20 37       	cpi	r18, 0x70	; 112
 44a:	61 f4       	brne	.+24     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				if (Ton < 2000){
 44c:	80 3d       	cpi	r24, 0xD0	; 208
 44e:	97 40       	sbci	r25, 0x07	; 7
 450:	a1 05       	cpc	r26, r1
 452:	b1 05       	cpc	r27, r1
 454:	20 f4       	brcc	.+8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
					bandera_SS_corta = 1;
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <bandera_SS_corta>
 45c:	03 c0       	rjmp	.+6      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				} else {
					bandera_SS_larga = 1;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <bandera_SS_larga>
				}
			}
		}
	}
}
 464:	bf 91       	pop	r27
 466:	af 91       	pop	r26
 468:	9f 91       	pop	r25
 46a:	8f 91       	pop	r24
 46c:	7f 91       	pop	r23
 46e:	6f 91       	pop	r22
 470:	5f 91       	pop	r21
 472:	4f 91       	pop	r20
 474:	2f 91       	pop	r18
 476:	0f 90       	pop	r0
 478:	0f be       	out	0x3f, r0	; 63
 47a:	0f 90       	pop	r0
 47c:	1f 90       	pop	r1
 47e:	18 95       	reti

00000480 <__vector_3>:

ISR(PCINT0_vect) {
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
 48a:	af 92       	push	r10
 48c:	bf 92       	push	r11
 48e:	cf 92       	push	r12
 490:	df 92       	push	r13
 492:	ef 92       	push	r14
 494:	ff 92       	push	r15
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	2f 93       	push	r18
 49c:	3f 93       	push	r19
 49e:	4f 93       	push	r20
 4a0:	5f 93       	push	r21
 4a2:	6f 93       	push	r22
 4a4:	7f 93       	push	r23
 4a6:	8f 93       	push	r24
 4a8:	9f 93       	push	r25
 4aa:	af 93       	push	r26
	static uint8_t bandera_antirrebotes_UP = 0;
	static uint64_t T_UP = 0;
	
	if (bandera_antirrebotes_UP == 1) {
 4ac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <bandera_antirrebotes_UP.1673>
 4b0:	81 30       	cpi	r24, 0x01	; 1
 4b2:	39 f5       	brne	.+78     	; 0x502 <__vector_3+0x82>
		if (millis - T_UP > 50) {        //Cambiar el tiempo a 5 ms para simulación
 4b4:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <millis>
 4b8:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <millis+0x1>
 4bc:	95 2f       	mov	r25, r21
 4be:	99 0f       	add	r25, r25
 4c0:	99 0b       	sbc	r25, r25
 4c2:	24 2f       	mov	r18, r20
 4c4:	35 2f       	mov	r19, r21
 4c6:	49 2f       	mov	r20, r25
 4c8:	59 2f       	mov	r21, r25
 4ca:	69 2f       	mov	r22, r25
 4cc:	79 2f       	mov	r23, r25
 4ce:	89 2f       	mov	r24, r25
 4d0:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_end>
 4d4:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_end+0x1>
 4d8:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <__data_end+0x2>
 4dc:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <__data_end+0x3>
 4e0:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <__data_end+0x4>
 4e4:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <__data_end+0x5>
 4e8:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <__data_end+0x6>
 4ec:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <__data_end+0x7>
 4f0:	0e 94 85 04 	call	0x90a	; 0x90a <__subdi3>
 4f4:	a2 e3       	ldi	r26, 0x32	; 50
 4f6:	0e 94 8e 04 	call	0x91c	; 0x91c <__cmpdi2_s8>
 4fa:	19 f0       	breq	.+6      	; 0x502 <__vector_3+0x82>
 4fc:	10 f0       	brcs	.+4      	; 0x502 <__vector_3+0x82>
			bandera_antirrebotes_UP = 0;
 4fe:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <bandera_antirrebotes_UP.1673>
		}
	}
	if (bandera_antirrebotes_UP == 0) {
 502:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <bandera_antirrebotes_UP.1673>
 506:	81 11       	cpse	r24, r1
 508:	3e c0       	rjmp	.+124    	; 0x586 <__vector_3+0x106>
		if (getBit(BOTON_UP, UP)) {
 50a:	18 9b       	sbis	0x03, 0	; 3
 50c:	1b c0       	rjmp	.+54     	; 0x544 <__vector_3+0xc4>
			T_UP = millis;
 50e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <millis>
 512:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <millis+0x1>
 516:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 51a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 51e:	89 2f       	mov	r24, r25
 520:	88 0f       	add	r24, r24
 522:	88 0b       	sbc	r24, r24
 524:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
 528:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__data_end+0x3>
 52c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x4>
 530:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__data_end+0x5>
 534:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x6>
 538:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__data_end+0x7>
			bandera_antirrebotes_UP = 1;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <bandera_antirrebotes_UP.1673>
 542:	21 c0       	rjmp	.+66     	; 0x586 <__vector_3+0x106>
			} else {
			if (estado == 'i'){
 544:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <estado>
 548:	89 36       	cpi	r24, 0x69	; 105
 54a:	19 f4       	brne	.+6      	; 0x552 <__vector_3+0xd2>
				bandera_UP = 1;
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <bandera_UP>
			}
			T_UP = millis;
 552:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <millis>
 556:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <millis+0x1>
 55a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 55e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 562:	89 2f       	mov	r24, r25
 564:	88 0f       	add	r24, r24
 566:	88 0b       	sbc	r24, r24
 568:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
 56c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__data_end+0x3>
 570:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x4>
 574:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__data_end+0x5>
 578:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x6>
 57c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__data_end+0x7>
			bandera_antirrebotes_UP = 1;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <bandera_antirrebotes_UP.1673>
		}
	}
	
}
 586:	af 91       	pop	r26
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	7f 91       	pop	r23
 58e:	6f 91       	pop	r22
 590:	5f 91       	pop	r21
 592:	4f 91       	pop	r20
 594:	3f 91       	pop	r19
 596:	2f 91       	pop	r18
 598:	1f 91       	pop	r17
 59a:	0f 91       	pop	r16
 59c:	ff 90       	pop	r15
 59e:	ef 90       	pop	r14
 5a0:	df 90       	pop	r13
 5a2:	cf 90       	pop	r12
 5a4:	bf 90       	pop	r11
 5a6:	af 90       	pop	r10
 5a8:	0f 90       	pop	r0
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	0f 90       	pop	r0
 5ae:	1f 90       	pop	r1
 5b0:	18 95       	reti

000005b2 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 5b2:	1f 92       	push	r1
 5b4:	0f 92       	push	r0
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	0f 92       	push	r0
 5ba:	11 24       	eor	r1, r1
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
	millis++;
 5c0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <millis>
 5c4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <millis+0x1>
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <millis+0x1>
 5ce:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <millis>
}
 5d2:	9f 91       	pop	r25
 5d4:	8f 91       	pop	r24
 5d6:	0f 90       	pop	r0
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	0f 90       	pop	r0
 5dc:	1f 90       	pop	r1
 5de:	18 95       	reti

000005e0 <__vector_7>:

ISR(TIMER2_COMPA_vect) {
 5e0:	1f 92       	push	r1
 5e2:	0f 92       	push	r0
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	0f 92       	push	r0
 5e8:	11 24       	eor	r1, r1
 5ea:	8f 93       	push	r24
 5ec:	9f 93       	push	r25
	if (sel == 1) {
 5ee:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <sel>
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	71 f4       	brne	.+28     	; 0x612 <__vector_7+0x32>
		clrBit(PORTB, 2);
 5f6:	85 b1       	in	r24, 0x05	; 5
 5f8:	8b 7f       	andi	r24, 0xFB	; 251
 5fa:	85 b9       	out	0x05, r24	; 5
		setBit(PORTB, 1);
 5fc:	85 b1       	in	r24, 0x05	; 5
 5fe:	82 60       	ori	r24, 0x02	; 2
 600:	85 b9       	out	0x05, r24	; 5
		SEGMENTOS = display_1_7seg;
 602:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <display_1_7seg>
 606:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <display_1_7seg+0x1>
 60a:	8b b9       	out	0x0b, r24	; 11
		sel = 0;
 60c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <sel>
 610:	0e c0       	rjmp	.+28     	; 0x62e <__vector_7+0x4e>
	} else {
		clrBit(PORTB, 1);
 612:	85 b1       	in	r24, 0x05	; 5
 614:	8d 7f       	andi	r24, 0xFD	; 253
 616:	85 b9       	out	0x05, r24	; 5
		setBit(PORTB, 2);
 618:	85 b1       	in	r24, 0x05	; 5
 61a:	84 60       	ori	r24, 0x04	; 4
 61c:	85 b9       	out	0x05, r24	; 5
		SEGMENTOS = display_0_7seg;
 61e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <display_0_7seg>
 622:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <display_0_7seg+0x1>
 626:	8b b9       	out	0x0b, r24	; 11
		sel = 1;
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <sel>
	}
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	0f 90       	pop	r0
 634:	0f be       	out	0x3f, r0	; 63
 636:	0f 90       	pop	r0
 638:	1f 90       	pop	r1
 63a:	18 95       	reti

0000063c <setup_pausa>:

volatile extern char estado;
volatile extern uint8_t bandera_SS;

void setup_pausa(){
	estado = 's';
 63c:	83 e7       	ldi	r24, 0x73	; 115
 63e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <estado>
 642:	08 95       	ret

00000644 <main_pausa>:
}

void main_pausa(){
	static uint8_t aux=0;
	setup_pausa();
 644:	0e 94 1e 03 	call	0x63c	; 0x63c <setup_pausa>
	do{
		aux++;
 648:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <aux.1612>
 64c:	8f 5f       	subi	r24, 0xFF	; 255
 64e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <aux.1612>
	}while (bandera_SS == 0);
 652:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <bandera_SS>
 656:	88 23       	and	r24, r24
 658:	b9 f3       	breq	.-18     	; 0x648 <main_pausa+0x4>
	bandera_SS = 0;
 65a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <bandera_SS>
 65e:	08 95       	ret

00000660 <setup_principal>:
volatile extern uint8_t display_1;

volatile uint16_t t_fin=3600;

void setup_principal(){
	estado = 'p';
 660:	80 e7       	ldi	r24, 0x70	; 112
 662:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <estado>
	
	//---Timer 1------------------------------------------------------------------------------------------------
	//Preescalado 256:
	TCCR1B = (1 << CS12);
 666:	84 e0       	ldi	r24, 0x04	; 4
 668:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	//Interrupciones por compare&match, IC.
	TIMSK1 |= 1<<OCIE1A;
 66c:	ef e6       	ldi	r30, 0x6F	; 111
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	82 60       	ori	r24, 0x02	; 2
 674:	80 83       	st	Z, r24
	TIMSK1 |= 1<<OCIE1B;
 676:	80 81       	ld	r24, Z
 678:	84 60       	ori	r24, 0x04	; 4
 67a:	80 83       	st	Z, r24

	//Registros de comparación:
	OCR1A = 31250;				//0.5 sec, 15635
 67c:	82 e1       	ldi	r24, 0x12	; 18
 67e:	9a e7       	ldi	r25, 0x7A	; 122
 680:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 684:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 62500;				//1 sec, 31250
 688:	84 e2       	ldi	r24, 0x24	; 36
 68a:	94 ef       	ldi	r25, 0xF4	; 244
 68c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 690:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 694:	08 95       	ret

00000696 <main_principal>:
	
}


void main_principal(){
	setup_principal();
 696:	0e 94 30 03 	call	0x660	; 0x660 <setup_principal>
	do {
		if (bandera_SS_corta == 1){
 69a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <bandera_SS_corta>
 69e:	81 30       	cpi	r24, 0x01	; 1
 6a0:	21 f4       	brne	.+8      	; 0x6aa <main_principal+0x14>
			bandera_SS_corta = 0;
 6a2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <bandera_SS_corta>
			main_pausa();
 6a6:	0e 94 22 03 	call	0x644	; 0x644 <main_pausa>
		}
		if (bandera_SS_larga == 1){
 6aa:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <bandera_SS_larga>
 6ae:	81 30       	cpi	r24, 0x01	; 1
 6b0:	19 f4       	brne	.+6      	; 0x6b8 <main_principal+0x22>
			bandera_SS_larga = 0;
 6b2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <bandera_SS_larga>
			break;
 6b6:	08 95       	ret
		}
	}while(t_fin != 0);
 6b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6c0:	89 2b       	or	r24, r25
 6c2:	59 f7       	brne	.-42     	; 0x69a <main_principal+0x4>
 6c4:	08 95       	ret

000006c6 <__vector_11>:
}


ISR(TIMER1_COMPA_vect) {
 6c6:	1f 92       	push	r1
 6c8:	0f 92       	push	r0
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	0f 92       	push	r0
 6ce:	11 24       	eor	r1, r1
 6d0:	2f 93       	push	r18
 6d2:	3f 93       	push	r19
 6d4:	4f 93       	push	r20
 6d6:	5f 93       	push	r21
 6d8:	6f 93       	push	r22
 6da:	7f 93       	push	r23
 6dc:	8f 93       	push	r24
 6de:	9f 93       	push	r25
 6e0:	af 93       	push	r26
 6e2:	bf 93       	push	r27
 6e4:	ef 93       	push	r30
 6e6:	ff 93       	push	r31
	static uint8_t display_mode = 0;
	
	//--Modo pausa, parpadear displays ---------
	if (estado == 's'){
 6e8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <estado>
 6ec:	83 37       	cpi	r24, 0x73	; 115
 6ee:	09 f0       	breq	.+2      	; 0x6f2 <__vector_11+0x2c>
 6f0:	52 c0       	rjmp	.+164    	; 0x796 <__vector_11+0xd0>
		display_mode =~ display_mode;
 6f2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <display_mode.1624>
 6f6:	80 95       	com	r24
 6f8:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <display_mode.1624>
		if (display_mode){
 6fc:	88 23       	and	r24, r24
 6fe:	09 f4       	brne	.+2      	; 0x702 <__vector_11+0x3c>
 700:	43 c0       	rjmp	.+134    	; 0x788 <__vector_11+0xc2>
			display_1 = (t_fin/60)/10;
 702:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 706:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 70a:	36 95       	lsr	r19
 70c:	27 95       	ror	r18
 70e:	36 95       	lsr	r19
 710:	27 95       	ror	r18
 712:	36 95       	lsr	r19
 714:	27 95       	ror	r18
 716:	af e4       	ldi	r26, 0x4F	; 79
 718:	bb e1       	ldi	r27, 0x1B	; 27
 71a:	0e 94 76 04 	call	0x8ec	; 0x8ec <__umulhisi3>
 71e:	96 95       	lsr	r25
 720:	87 95       	ror	r24
 722:	96 95       	lsr	r25
 724:	87 95       	ror	r24
 726:	96 95       	lsr	r25
 728:	87 95       	ror	r24
 72a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <display_1>
			display_0 = (t_fin/60)%10;
 72e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 732:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 736:	a9 e8       	ldi	r26, 0x89	; 137
 738:	b8 e8       	ldi	r27, 0x88	; 136
 73a:	0e 94 76 04 	call	0x8ec	; 0x8ec <__umulhisi3>
 73e:	ac 01       	movw	r20, r24
 740:	56 95       	lsr	r21
 742:	47 95       	ror	r20
 744:	52 95       	swap	r21
 746:	42 95       	swap	r20
 748:	4f 70       	andi	r20, 0x0F	; 15
 74a:	45 27       	eor	r20, r21
 74c:	5f 70       	andi	r21, 0x0F	; 15
 74e:	45 27       	eor	r20, r21
 750:	9a 01       	movw	r18, r20
 752:	ad ec       	ldi	r26, 0xCD	; 205
 754:	bc ec       	ldi	r27, 0xCC	; 204
 756:	0e 94 76 04 	call	0x8ec	; 0x8ec <__umulhisi3>
 75a:	96 95       	lsr	r25
 75c:	87 95       	ror	r24
 75e:	96 95       	lsr	r25
 760:	87 95       	ror	r24
 762:	96 95       	lsr	r25
 764:	87 95       	ror	r24
 766:	9c 01       	movw	r18, r24
 768:	22 0f       	add	r18, r18
 76a:	33 1f       	adc	r19, r19
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	88 0f       	add	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	82 0f       	add	r24, r18
 77a:	93 1f       	adc	r25, r19
 77c:	9a 01       	movw	r18, r20
 77e:	28 1b       	sub	r18, r24
 780:	39 0b       	sbc	r19, r25
 782:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <display_0>
 786:	05 c0       	rjmp	.+10     	; 0x792 <__vector_11+0xcc>
			} else {
			display_1 = 10;
 788:	8a e0       	ldi	r24, 0x0A	; 10
 78a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <display_1>
			display_0 = 10;
 78e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <display_0>
		}
		actualiza_display();
 792:	0e 94 7c 00 	call	0xf8	; 0xf8 <actualiza_display>
	}
	//------------------------------------------
	//OCR1A += 15625;
	OCR1A += 31250;	
 796:	e8 e8       	ldi	r30, 0x88	; 136
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 81       	ld	r24, Z
 79c:	91 81       	ldd	r25, Z+1	; 0x01
 79e:	8e 5e       	subi	r24, 0xEE	; 238
 7a0:	95 48       	sbci	r25, 0x85	; 133
 7a2:	91 83       	std	Z+1, r25	; 0x01
 7a4:	80 83       	st	Z, r24
}
 7a6:	ff 91       	pop	r31
 7a8:	ef 91       	pop	r30
 7aa:	bf 91       	pop	r27
 7ac:	af 91       	pop	r26
 7ae:	9f 91       	pop	r25
 7b0:	8f 91       	pop	r24
 7b2:	7f 91       	pop	r23
 7b4:	6f 91       	pop	r22
 7b6:	5f 91       	pop	r21
 7b8:	4f 91       	pop	r20
 7ba:	3f 91       	pop	r19
 7bc:	2f 91       	pop	r18
 7be:	0f 90       	pop	r0
 7c0:	0f be       	out	0x3f, r0	; 63
 7c2:	0f 90       	pop	r0
 7c4:	1f 90       	pop	r1
 7c6:	18 95       	reti

000007c8 <__vector_12>:

ISR(TIMER1_COMPB_vect) {
 7c8:	1f 92       	push	r1
 7ca:	0f 92       	push	r0
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	0f 92       	push	r0
 7d0:	11 24       	eor	r1, r1
 7d2:	2f 93       	push	r18
 7d4:	3f 93       	push	r19
 7d6:	4f 93       	push	r20
 7d8:	5f 93       	push	r21
 7da:	6f 93       	push	r22
 7dc:	7f 93       	push	r23
 7de:	8f 93       	push	r24
 7e0:	9f 93       	push	r25
 7e2:	af 93       	push	r26
 7e4:	bf 93       	push	r27
 7e6:	ef 93       	push	r30
 7e8:	ff 93       	push	r31
	static uint8_t display_mode_p = 0;
	//solo se ejecuta en el programa principal
	if (estado == 'p'){
 7ea:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <estado>
 7ee:	80 37       	cpi	r24, 0x70	; 112
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <__vector_12+0x2c>
 7f2:	5d c0       	rjmp	.+186    	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
		t_fin--;
 7f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7fc:	01 97       	sbiw	r24, 0x01	; 1
 7fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 802:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		display_mode_p =~ display_mode_p;
 806:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <display_mode_p.1630>
 80a:	80 95       	com	r24
 80c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <display_mode_p.1630>
		if (display_mode_p){
 810:	88 23       	and	r24, r24
 812:	09 f4       	brne	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 814:	43 c0       	rjmp	.+134    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
			display_1 = (t_fin/60)/10;
 816:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 81a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 81e:	36 95       	lsr	r19
 820:	27 95       	ror	r18
 822:	36 95       	lsr	r19
 824:	27 95       	ror	r18
 826:	36 95       	lsr	r19
 828:	27 95       	ror	r18
 82a:	af e4       	ldi	r26, 0x4F	; 79
 82c:	bb e1       	ldi	r27, 0x1B	; 27
 82e:	0e 94 76 04 	call	0x8ec	; 0x8ec <__umulhisi3>
 832:	96 95       	lsr	r25
 834:	87 95       	ror	r24
 836:	96 95       	lsr	r25
 838:	87 95       	ror	r24
 83a:	96 95       	lsr	r25
 83c:	87 95       	ror	r24
 83e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <display_1>
			display_0 = (t_fin/60)%10;
 842:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 846:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 84a:	a9 e8       	ldi	r26, 0x89	; 137
 84c:	b8 e8       	ldi	r27, 0x88	; 136
 84e:	0e 94 76 04 	call	0x8ec	; 0x8ec <__umulhisi3>
 852:	ac 01       	movw	r20, r24
 854:	56 95       	lsr	r21
 856:	47 95       	ror	r20
 858:	52 95       	swap	r21
 85a:	42 95       	swap	r20
 85c:	4f 70       	andi	r20, 0x0F	; 15
 85e:	45 27       	eor	r20, r21
 860:	5f 70       	andi	r21, 0x0F	; 15
 862:	45 27       	eor	r20, r21
 864:	9a 01       	movw	r18, r20
 866:	ad ec       	ldi	r26, 0xCD	; 205
 868:	bc ec       	ldi	r27, 0xCC	; 204
 86a:	0e 94 76 04 	call	0x8ec	; 0x8ec <__umulhisi3>
 86e:	96 95       	lsr	r25
 870:	87 95       	ror	r24
 872:	96 95       	lsr	r25
 874:	87 95       	ror	r24
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	9c 01       	movw	r18, r24
 87c:	22 0f       	add	r18, r18
 87e:	33 1f       	adc	r19, r19
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	88 0f       	add	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	88 0f       	add	r24, r24
 88a:	99 1f       	adc	r25, r25
 88c:	82 0f       	add	r24, r18
 88e:	93 1f       	adc	r25, r19
 890:	9a 01       	movw	r18, r20
 892:	28 1b       	sub	r18, r24
 894:	39 0b       	sbc	r19, r25
 896:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <display_0>
 89a:	07 c0       	rjmp	.+14     	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
		} else {
			display_1 = 11;
 89c:	8b e0       	ldi	r24, 0x0B	; 11
 89e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <display_1>
			display_0 = contador;
 8a2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
 8a6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <display_0>
		}
		actualiza_display();	
 8aa:	0e 94 7c 00 	call	0xf8	; 0xf8 <actualiza_display>
	}
	OCR1B += 62500;
 8ae:	ea e8       	ldi	r30, 0x8A	; 138
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	80 81       	ld	r24, Z
 8b4:	91 81       	ldd	r25, Z+1	; 0x01
 8b6:	8c 5d       	subi	r24, 0xDC	; 220
 8b8:	9b 40       	sbci	r25, 0x0B	; 11
 8ba:	91 83       	std	Z+1, r25	; 0x01
 8bc:	80 83       	st	Z, r24
	//OCR1B += 31250;
 8be:	ff 91       	pop	r31
 8c0:	ef 91       	pop	r30
 8c2:	bf 91       	pop	r27
 8c4:	af 91       	pop	r26
 8c6:	9f 91       	pop	r25
 8c8:	8f 91       	pop	r24
 8ca:	7f 91       	pop	r23
 8cc:	6f 91       	pop	r22
 8ce:	5f 91       	pop	r21
 8d0:	4f 91       	pop	r20
 8d2:	3f 91       	pop	r19
 8d4:	2f 91       	pop	r18
 8d6:	0f 90       	pop	r0
 8d8:	0f be       	out	0x3f, r0	; 63
 8da:	0f 90       	pop	r0
 8dc:	1f 90       	pop	r1
 8de:	18 95       	reti

000008e0 <__tablejump2__>:
 8e0:	ee 0f       	add	r30, r30
 8e2:	ff 1f       	adc	r31, r31
 8e4:	05 90       	lpm	r0, Z+
 8e6:	f4 91       	lpm	r31, Z
 8e8:	e0 2d       	mov	r30, r0
 8ea:	09 94       	ijmp

000008ec <__umulhisi3>:
 8ec:	a2 9f       	mul	r26, r18
 8ee:	b0 01       	movw	r22, r0
 8f0:	b3 9f       	mul	r27, r19
 8f2:	c0 01       	movw	r24, r0
 8f4:	a3 9f       	mul	r26, r19
 8f6:	70 0d       	add	r23, r0
 8f8:	81 1d       	adc	r24, r1
 8fa:	11 24       	eor	r1, r1
 8fc:	91 1d       	adc	r25, r1
 8fe:	b2 9f       	mul	r27, r18
 900:	70 0d       	add	r23, r0
 902:	81 1d       	adc	r24, r1
 904:	11 24       	eor	r1, r1
 906:	91 1d       	adc	r25, r1
 908:	08 95       	ret

0000090a <__subdi3>:
 90a:	2a 19       	sub	r18, r10
 90c:	3b 09       	sbc	r19, r11
 90e:	4c 09       	sbc	r20, r12
 910:	5d 09       	sbc	r21, r13
 912:	6e 09       	sbc	r22, r14
 914:	7f 09       	sbc	r23, r15
 916:	80 0b       	sbc	r24, r16
 918:	91 0b       	sbc	r25, r17
 91a:	08 95       	ret

0000091c <__cmpdi2_s8>:
 91c:	00 24       	eor	r0, r0
 91e:	a7 fd       	sbrc	r26, 7
 920:	00 94       	com	r0
 922:	2a 17       	cp	r18, r26
 924:	30 05       	cpc	r19, r0
 926:	40 05       	cpc	r20, r0
 928:	50 05       	cpc	r21, r0
 92a:	60 05       	cpc	r22, r0
 92c:	70 05       	cpc	r23, r0
 92e:	80 05       	cpc	r24, r0
 930:	90 05       	cpc	r25, r0
 932:	08 95       	ret

00000934 <_exit>:
 934:	f8 94       	cli

00000936 <__stop_program>:
 936:	ff cf       	rjmp	.-2      	; 0x936 <__stop_program>
